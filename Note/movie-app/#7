!   React에서의 map()

    리액트는 기본적으로 list에 있는 모든 item을 인식하기 때문에 
    key를 넣어 고유하게 만들어줘야함

    {toDos.map((item, index) => {item})}
    map의 첫 번째 argument는 값이고, 두번째는 index 즉 숫자를 의미함

    {{item},{item},{item}...}
    배열을 만들어 각자 고유의 key를 가지게 함

    때문에 <li>{item}</li> 이 아니라
    <li key={index}>{item}</li> 
    이렇게 작성해야함
    


!   event 함수에 argument를 넣어 보내는 방법

    onClick={deleteBtn(index)} 과 같은 경우는
    자동으로 deleteBtn 함수가 실행됨..
    
    onClick={() => deleteBtn(index)} 처럼
    arrow func를 사용하면, 클릭할때까지 기다려준다. 이 방법 쓰자



!   Select - option

    <select onChange={onChange}>
        <option key={index} value={JSON.stringify(coin)}>1</option>
        <option key={index} value={JSON.stringify(coin)}>2</option>
        <option key={index} value={JSON.stringify(coin)}>3</option>
    </select>

    이렇게 option에 value 값 걸어주면
    onChange 함수에서 e.target.value로 coin값을 받아올 수 있음



!   then -> async, await

    then()을 사용해보자
        useEffect(() => {
          fetch("https://api.coinpaprika.com/v1/tickers")
              .then((response) => response.json())
              .then((json) => {
                setCoins(json);
                setLoading(false);
              });
        }, []);


    async, await를 사용해보자
        const getCoins = async () => {
           const response = await fetch("https://api.coinpaprika.com/v1/tickers");
           const json = await response.json();
           setCoins(json);
           setLoading(false);
        }
        useEffect(() => {
            getCoins();
        }, []);

    async, await를 더 간략화 해보자
        const getCoins = async () => {
           const json = await (await fetch("https://api.coinpaprika.com/v1/tickers")).json();
           setCoins(json);
           setLoading(false);
        }
        useEffect(() => {
            getCoins();
        }, []);



!   React-router-dom

    리액트에서 페이지 이동은 위 라우터 돔을 사용함.
    물론, HTML <a> 태그를 사용해도 되지만,
    이는 페이지를 새로고침하게 되어, 리액트의 장점을 살리지 못함.
    때문에 라우터 돔을 사용하고, <a> 태그 대신 <Link> 태그를 사용함.
    
    당연히 dynamic url도 가능함 == url에 변수를 넣어서 사용할 수 있다는 뜻.

    url의 parameter는 useParams()를 사용해서 받아올 수 있다.
