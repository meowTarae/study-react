! Route 설정

    function Router() {
      return (
        <BrowserRouter>
          <Switch>  // Switch는 한번에 하나의 Route를 렌더링하는 방법임.
            <Route path="/:coinId">
              <Coin />
            </Route>

            <Route path="/">
              <Coins />
            </Route>
          </Switch>
        </BrowserRouter>
      );
    }



!   전역 css

    const GlobalStyle = createGlobalStyle`
        body {
            background-color: #f2f2f2;
        }
    `;

    createGlobalStyle도 styled-components의 일종임.



! Tip

    react에서는 a tag말고 link 쓰라고 햇자너
    렌더링 이후에 확인해보니까 link가 a태그로 바뀌더라고 ㅇㅇ;
    그래서 a 태그로 css 작성하니까 먹히더라 ㅇㅅㅇ;



! react-ts fetch 사용법

    useEffect(() => {
      (async () => {
        const json  = await (await fetch(`주소`)).json();
      })();
    },[ value ])

    ()(); 를 사용해야 함.
    그리고 [] 안에 value값을 넣어주자.
    TS는 dependency value 값이 없으면 경고를 띄움.



! Link to

  A 페이지에서 B 페이지로 이동할 때, 보통 텍스트를 넘겨줬잖아.
  이후 해당 텍스트로 다시 fetch를 했었는데..
  그런데 '데이터'를 넘겨줄 수 있다면??
  'Behind the scene data'라고 부르며, Link tag인 to로 가능함.

  단, 이는 A 페이지에서 Link를 클릭 했을때 발생하므로,
  url을 B 페이지로 입력 후 접속하려하면 to로 넘겨받은 data가 없어서 에러남.
  그러므로 이에 대한 조치를 해줘야 한다.
  


! react query

  ex)
    coin.tsx
      const {isLoading, data} = useQuery<Interface>([queryKey], fetchFunc);

    api.ts
      export asyncc function fetchFunc() {
        const json = await (await fetch(`주소`)).json();
        return json;

        or

        return fetch(`주소`).then((promise) => promise.json());
      } 

    타 파일(api.ts)에선 json data의 promise를 가져와야 함

  우리가 일반적으로 하던 fetch 함수를 객체화 해서 타 파일에 저장했다고 가정.
  useQuery를 사용하면, 다른 파일에서 작성한 fetch func를 가져올 수 있음.
  또한 그 func가 로딩 중일때, isLoading이 true로 반환해줌.

  data에는 fetch func에서 반환한 값이 들어가게 됨.
  useQuery는 data를 캐쉬에 저장해줌 => fetchFunc를 다시 호출하지 않음.
  
  일단 ThemeProvider처럼, index.tsx에서 App을 QueryClientProvider 태그로 감싸주자.
  그럼 사용할 수 있덩



! useQuery 3번째 parameter

  refetchInterval 이다.
  특정 시간마다 refetch를 해주는 역할.



! Helmet

  Helmet은 head로 가는 direct link이다.
  해서 Helmet 컴포넌트 안에 head 값들을 넣어주면, Document head 부분에 넣어줌.

  ex)
    <Helmet>
      <title>
        코인트래커
      </title>
      <link ~~~ />
    </Helmet>
  


! React-router-dom

  우리 App에 URL을 가질 수 있게 해줌!
  
  <Route path={"/:coinId"}>
    <Coin />
  </Route>

  이렇게 말야.

  그리고 Coin 파일에서 해당 coinId 값을 사용하고 싶다?
    => const params = useParams();
       or const { coinId } = useParams();
       
       log(params) => coinId랑 [[Prototype]] 나옴 ㅇㅇ


  
! useRouteMatch

  React Hook 중 하나로, 유저가 해당 url에 있는지 없는지를 체크해줌 !



! FontAwesome

  리액트에서 아이콘 쓰려면
  docs에 나와있는 패키지들 싹 다 npm i 로 설치해주고
  FontAwesome과 사용할 아이콘들을 import 해준다.
  
  styled components는
    const StyledFontAwesomeIcon = styled(FontAwesomeIcon)`
      ~~~
    `
  위와 같이 나타내고 평소처럼 사용하면 댐!



! Error 1

  '{ coinId: string; }' 형식은 'IntrinsicAttributes' 형식에 할당할 수 없습니다.
  'IntrinsicAttributes' 형식에 'coinId' 속성이 없습니다.ts(2322)

  위 에러는 Coin.tsx에서 Chart.tsx로 coinId 값을 보내주려할때 발생했다.
  발생 이유는 Chart.tsx에서 coinId를 argument로 받는 func이 없었기 때문


  