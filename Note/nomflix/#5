! Route 설정

    function Router() {
      return (
        <BrowserRouter>
          <Switch>  // Switch는 한번에 하나의 Route를 렌더링하는 방법임.
            <Route path="/:coinId">
              <Coin />
            </Route>

            <Route path="/">
              <Coins />
            </Route>
          </Switch>
        </BrowserRouter>
      );
    }



!   전역 css

    const GlobalStyle = createGlobalStyle`
        body {
            background-color: #f2f2f2;
        }
    `;

    createGlobalStyle도 styled-components의 일종임.



! Tip

    react에서는 a tag말고 link 쓰라고 햇자너
    렌더링 이후에 확인해보니까 link가 a태그로 바뀌더라고 ㅇㅇ;
    그래서 a 태그로 css 작성하니까 먹히더라 ㅇㅅㅇ;



! react-ts fetch 사용법

    useEffect(() => {
      (async () => {
        const json  = await (await fetch(`주소`)).json();
      })();
    },[ value ])

    ()(); 를 사용해야 함.
    그리고 [] 안에 value값을 넣어주자.
    TS는 dependency value 값이 없으면 경고를 띄움.



! react query

  ex) const {isLoading, data} = useQuery<Interface>([queryKey], fetchFunc);

  우리가 일반적으로 하던 fetch 함수를 객체화 해서 타 파일에 저장했다고 가정.
  useQuery를 사용하면, 다른 파일에서 작성한 fetch func를 가져올 수 있음.
  또한 그 func가 로딩 중일때, isLoading이 true로 반환해줌.
  
  data에는 fetch func에서 반환한 값이 들어가게 됨.
  useQuery는 data를 캐쉬에 저장해줌 => fetchFunc를 다시 호출하지 않음.
  
  일단 ThemeProvider처럼, index.tsx에서 App을 QueryClientProvider 태그로 감싸주자.
  그럼 사용할 수 있덩

