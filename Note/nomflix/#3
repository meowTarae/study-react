!   TS

    npx create-react-app Study-react --template typescript
    
    react 파일명은 js -> tsx 로 바뀜.

    또한 기존에 했던 
    npm i styled-components가 작동이 안될거임
    때문에 npm i @types/styled-components를 추가로 설치해줘야함.
    @types는 타입스크립트에서 사용하는 라이브러리들의 타입을 정의해놓은 라이브러리임.



!   How to types?

    우리가 리액트만 사용할 때, prop-types를 사용해서 간단하게 타입을 지정해줬었음.
    근데 얘는 코드가 실행한 후에 타입을 체크해줌

    TS는 코드 실행 전에 타입 에러를 감지해줌.
    그래서 prop-types 말고 TS를 사용해보자구~


    우선 interface를 만들어주자.

        interface CircleProps {
            bgColor: string;
        }

        function Circle({bgColor}: CircleProps) {
        // function Circle({bgColor, x}: CircleProps) {  => 에러! x는 CircleProps에 없는 prop임.
            ~~~
        }

    interface는 object의 타입을 정의해줌.



!   TS에서의 useState

    const [value, setValue] = useState<string | number>('tarae');
    초기값이 string이어도 number로 바뀔 수 있잖아?
    그럴경우, 이렇게 <> arrow bracket 안에 타입을 지정해줘야함.
    안그러면 TS가 자동적으로 type변환 일어나는 것에 에러를 띄움. 



!   TS는 function event type도 관리해줘야 한다.

    const onChange = (e: React.FormEvent<HTMLInputElement>) => {
                    // e가 어데서 온 event임? => form(내부의 input)!
                    // form 내부의 어떤 element? => input!
        
        console.log(e.currentTarget.value);
        // 그냥 target 아니고 currentTarget이다. 기능은 둘 다 같음 ㅇㅇ;
    }



!   Styled-components (TypeScript)

    사용을 위해서, interface를 declare해줘야 함.
    해서 파일명도 ~~~.d.ts로 해줘야함.

    - styled.d.ts -
        import "styled-components";

        declare module "styled-components" {
          export interface DefaultTheme {
            bgColor: string;
            textColor: string;
            btnColor: string;
          }
        }
        // interface명인 defaultTheme은 기본적으로 비어있음.

    - theme.tsx -
        import { DefaultTheme } from "styled-components";

        const lightTheme: DefaultTheme = {
          bgColor: "white",
          textColor: "black",
          btnColor: "tomato",
        };
        // DefaultTheme의 프로퍼티를 확인해주기 때문에 프로퍼티가 없는게 있다면, 에러를 띄워줌.
    

    - index.tsx -
        import { ThemeProvider } from "styled-components";

        root.render(
          <>
            <ThemeProvider theme={lightTheme}>
              <App />
            </ThemeProvider>
          </>
        );
        // ThemeProvider라는 컴포넌트를 사용해서 
        // theme을 자식 컴포넌트들에게 전달해줌.



!   SyntheticEvent (합성 이벤트)

    form에서 사용했던 onChange, onSubmit 등의 이벤트들은 모두 SyntheticEvent이다.
    만약 어떤 html element에서 발생한 event를 다루고 싶다면,
    https://ko.reactjs.org/docs/events.html#gatsby-focus-wrapper 
    요기를 방문해보자구



테마 요약
  styled.d.ts
    textColor, bgColor 등의 타입을 설정

  theme.ts 
    const lightTheme:DefaultTheme = {
      bgColor: "white"
    }
    처럼 유저가 셋팅하는 곳 